/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.thingml.tradfri.ui;

import javax.swing.JButton;
import org.thingml.tradfri.LightBulb;
import org.thingml.tradfri.LightBulbListner;
import org.thingml.tradfri.TradfriConstants;

/**
 *
 * @author franck
 */
public class BulbPanel extends javax.swing.JPanel implements LightBulbListner {

    protected LightBulb bulb;
    protected boolean updating = true;
    /**
     * Creates new form BulbPanel
     */
    public BulbPanel(LightBulb bulb) {
        this.bulb = bulb;
        bulb.addLightBulbListner(this);
        initComponents();
        updatePanelContent();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupTemperature = new javax.swing.ButtonGroup();
        jToggleButton1 = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();
        jSlider1 = new javax.swing.JSlider();
        jTextFieldName = new javax.swing.JTextField();
        jRadioCold = new javax.swing.JRadioButton();
        jRadioNormal = new javax.swing.JRadioButton();
        jRadioWarm = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        jLabelDates = new javax.swing.JLabel();

        setMaximumSize(new java.awt.Dimension(32767, 89));
        setMinimumSize(new java.awt.Dimension(0, 89));

        jToggleButton1.setText("On / Off");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Intensity :");

        jSlider1.setMaximum(255);
        jSlider1.setMinimum(1);
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        jTextFieldName.setEditable(false);
        jTextFieldName.setText("[Not Connected]");

        buttonGroupTemperature.add(jRadioCold);
        jRadioCold.setText("Cold");
        jRadioCold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioColdActionPerformed(evt);
            }
        });

        buttonGroupTemperature.add(jRadioNormal);
        jRadioNormal.setText("Normal");
        jRadioNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioNormalActionPerformed(evt);
            }
        });

        buttonGroupTemperature.add(jRadioWarm);
        jRadioWarm.setText("Warm");
        jRadioWarm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioWarmActionPerformed(evt);
            }
        });

        jLabel2.setText("Name :");

        jLabelDates.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabelDates.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelDates.setText("Installed: Unknown - Last seen: Unknown - Firmware: Unknown");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSlider1, javax.swing.GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextFieldName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jRadioWarm)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioNormal)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioCold))))
                    .addComponent(jLabelDates, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToggleButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioCold)
                    .addComponent(jRadioNormal)
                    .addComponent(jRadioWarm)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelDates)
                .addGap(13, 13, 13))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        if (updating) return;
        bulb.setOn(jToggleButton1.isSelected());
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        if (updating) return;
        if (jSlider1.getValueIsAdjusting()) return;
        bulb.setIntensity(jSlider1.getValue());
    }//GEN-LAST:event_jSlider1StateChanged

    private void jRadioWarmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioWarmActionPerformed
        if (updating) return;
        bulb.setColor(TradfriConstants.COLOR_WARM);
    }//GEN-LAST:event_jRadioWarmActionPerformed

    private void jRadioNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioNormalActionPerformed
        if (updating) return;
        bulb.setColor(TradfriConstants.COLOR_NORMAL);
    }//GEN-LAST:event_jRadioNormalActionPerformed

    private void jRadioColdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioColdActionPerformed
        if (updating) return;
        bulb.setColor(TradfriConstants.COLOR_COLD);
    }//GEN-LAST:event_jRadioColdActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupTemperature;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelDates;
    private javax.swing.JRadioButton jRadioCold;
    private javax.swing.JRadioButton jRadioNormal;
    private javax.swing.JRadioButton jRadioWarm;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JTextField jTextFieldName;
    private javax.swing.JToggleButton jToggleButton1;
    // End of variables declaration//GEN-END:variables

    protected void updatePanelContent() {
        updating = true;
        jTextFieldName.setText(bulb.getName());
        jTextFieldName.setToolTipText(bulb.getType());
        jSlider1.setValue(bulb.getIntensity());
        jToggleButton1.setSelected(bulb.isOn());
        if (bulb.getColor() != null) {
            jRadioCold.setEnabled(true);
            jRadioNormal.setEnabled(true);
            jRadioWarm.setEnabled(true);
            switch(bulb.getColor()) {
                case TradfriConstants.COLOR_NORMAL: jRadioNormal.setSelected(true); break;
                case TradfriConstants.COLOR_WARM: jRadioWarm.setSelected(true); break;
                case TradfriConstants.COLOR_COLD: jRadioCold.setSelected(true); break;
            }
        }
        else {
            jRadioCold.setEnabled(false);
            jRadioNormal.setEnabled(false);
            jRadioWarm.setEnabled(false);
        }
        
        
        if (bulb.isOnline()) {
            jToggleButton1.setEnabled(true);
            jRadioCold.setEnabled(true);
            jRadioNormal.setEnabled(true);
            jRadioWarm.setEnabled(true);
            jSlider1.setEnabled(true);
            jLabelDates.setText("Installed: "+bulb.getDateInstalled()+" - Last seen: "+bulb.getDateLastSeen()+" - Firmware: " + bulb.getFirmware() + " [online]");
        }
        else {
            jToggleButton1.setEnabled(false);
            jRadioCold.setEnabled(false);
            jRadioNormal.setEnabled(false);
            jRadioWarm.setEnabled(false);
            jSlider1.setEnabled(false);
            jLabelDates.setText("Installed: "+bulb.getDateInstalled()+" - Last seen: "+bulb.getDateLastSeen()+" - Firmware: " + bulb.getFirmware() + " [offline]");
        }
        
        updating = false;
    }
    
    public void lightBulbUpdate(LightBulb bulb) {
        if (this.bulb == bulb)  updatePanelContent();
    }
}
